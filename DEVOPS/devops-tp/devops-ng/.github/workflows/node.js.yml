name: Node.js CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  TAG_NAME: ascadis/ajc-ci:angular-devops-1.0.0-${{ github.run_number }}
  CONTAINER_NAME: ajc-devops-ng-jeremy

jobs:
  build:
    name: Build Angular
    runs-on: ubuntu-latest

    steps:
      - name: Git checkout
        uses: actions/checkout@v4
      
      - name: Use Node.js 20.x
        uses: actions/setup-node@v3
        with:
          node-version: 20.x
          cache: 'npm'
          

      - name: Build de Angular
        run: |
          npm install
          npm run build

      - name: Partage des fichiers HTML / CSS / JS
        uses: actions/upload-artifact@v3
        with:
          name: app-ng
          path: dist/devops-ng/browser

  docker:
    name: Build Docker
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: Git checkout
        uses: actions/checkout@v4

      - name: Récupération des fichiers HTML / CSS / JS
        uses: actions/download-artifact@v3
        with:
          name: app-ng

      - name: Installation QEMU
        uses: docker/setup-qemu-action@v3

      - name: Installation Docker BuildX
        uses: docker/setup-buildx-action@v3

      - name: Connexion au Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN_GITHUB }}

      - name: Build de l'image & Push de l'image sur le Docker Hub
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ env.TAG_NAME }}

  deploy:
    name: Déploiement sur serveur via SSH
    needs: docker
    runs-on: ubuntu-latest

    steps:
      - name: Préparation de la connexion SSH vers notre machine
        run: |
          install -m 600 -D /dev/null ~/.ssh/id_rsa
          echo "${{ secrets.SSH_KEY }}" > ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.SSH_HOST }} > ~/.ssh/known_hosts

      - name: Commandes pour info à exécuter sur la machine distante
        run: >
          ssh ${{ secrets.SSH_USERNAME }}@${{ secrets.SSH_HOST }}
          "
            docker stop ${{ env.CONTAINER_NAME }} || true
            docker rm ${{ env.CONTAINER_NAME }} || true
            docker login -u ${{ secrets.DOCKERHUB_USERNAME }} -p ${{ secrets.DOCKERHUB_TOKEN_GITHUB }}
            docker run -d --network infra --name ${{ env.CONTAINER_NAME }} ${{ env.TAG_NAME }}
            exit
          "
        
      - name: Nettoyage
        run: rm -rf ~/.ssh
